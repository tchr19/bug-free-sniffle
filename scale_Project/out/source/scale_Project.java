/* autogenerated by Processing revision 1276 on 2023-11-12 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class scale_Project extends PApplet {

SliderScale mySlider;
float buttonX, buttonY, buttonWidth, buttonHeight;
float closeButtonX, closeButtonY, closeButtonSize;
int firstRoundCounter, secondRoundCounter;



 public void setup() {
    /* size commented out by preprocessor */;
    mySlider = new SliderScale(9); // 9 anchor scale
    
    //Submitting:
    buttonX = width/2 - buttonWidth/2;
    buttonY = height - 50;
    buttonWidth = 100;
    buttonHeight = 40;

    // close application
    closeButtonSize = 30;
    closeButtonX = width - 40;
    closeButtonY = 10;


    firstRoundCounter = 0; // Var for storing trial nr. in first round
    secondRoundCounter = 0;  // var for storing trial nr. in second round.


}


 public void draw() {
  background(255);

  mySlider.drawScale();

  // Draw the submit button
  fill(56, 232, 94);
  rect(buttonX, buttonY, buttonWidth, buttonHeight, 10);

  // Display the submit button label
  fill(0);
  textSize(16);
  textAlign(CENTER, CENTER);
  text("Submit", buttonX + buttonWidth / 2, buttonY + buttonHeight / 2);

  // Draw the close button
  fill(255, 0, 0); // Red color for the close button
  rect(closeButtonX, closeButtonY, closeButtonSize, closeButtonSize, 5);

  // Display close button label
  fill(255);
  textSize(16);
  textAlign(CENTER, CENTER);
  text("X", closeButtonX + closeButtonSize / 2, closeButtonY + closeButtonSize / 2);

  // Display scale label
  fill(0);
  textSize(100);
  textAlign(CENTER,CENTER);
  text("TEST", width/2, 95);

  
}



 public void mousePressed() {
  // Check if the mouse is over the submit button
  if (mouseX > buttonX && mouseX < buttonX + buttonWidth &&
      mouseY > buttonY && mouseY < buttonY + buttonHeight) {
    mySlider.printSliderValue();
    mySlider.initializeAnchors(); // Reset the slider position to the initial state
  }

  // Check if the mouse is over the close button
  if (mouseX > closeButtonX && mouseX < closeButtonX + closeButtonSize &&
      mouseY > closeButtonY && mouseY < closeButtonY + closeButtonSize) {
    exit(); // Close the application
  }

  // Check if the mouse is over the scale
  float scaleY = height * 1 / 3;
  if (mouseY > scaleY - 15 && mouseY < scaleY + 15) {
    mySlider.setShowSlider(true);
    mySlider.setSliderPosition(mouseX); // Set the slider position to the mouse click
  }

  // Call the mousePressed function of the SliderScale object
  mySlider.mousePressed();
}

 public void mouseReleased() {
// Call the mouseReleased function of the SliderScale object
  mySlider.mouseReleased();
}

 public void mouseDragged() {
  // Call the mouseDragged function of the SliderScale object
  mySlider.mouseDragged();
}
class SliderScale {
  float sliderX;
  boolean dragging;
  int numAnchors; 
  float[] anchorX;
  float spacing;
  boolean showSlider;

  SliderScale(int numAnchors) {
    this.numAnchors = numAnchors;
    anchorX = new float[numAnchors];
    dragging = false;
    spacing = 0;
    showSlider = false; // Initially, the slider button is hidden - Changes to true when slider is pressed.
    initializeAnchors();
  }

    // Function to make the anchor points, and space them equally apart. 
   public void initializeAnchors() {
    spacing = (width - 200) / (numAnchors - 1);
    for (int i = 0; i < numAnchors; i++) {
      anchorX[i] = map(i, 0, numAnchors - 1, 300 + spacing / 2, width - 300 - spacing / 2); // 300 er omkring slut og start punkt. 
    }
    // Scale lables - hardcoded
    fill(0);
    textSize(16);
    stroke(5);
    textAlign(CENTER, CENTER);
    text("SLET IKKE", spacing, height * 1/3 + 20);
    text("LIDT", spacing, height * 1/3 + 20);
    text("MODERAT", spacing, height * 1/3 + 20);
    text("MEGET", spacing, height * 1/3 + 20);
    text("EKSTREMT", spacing, height * 1/3 + 20);
  }

    // Draw the actual scale in the canvas. 
   public void drawScale() {
    float scaleY = height * 1 / 3;
    stroke(0);
    strokeWeight(3);
    line(300, scaleY, width - 300, scaleY); // 300 er hvor den starter og slutter. 

    stroke(0);
    strokeWeight(5);
    line(width * 1/3 ,150, width*2/3,150);


    fill(0);
    for (int i = 0; i < numAnchors; i++) {
      ellipse(anchorX[i], scaleY, 10, 10);
    }

        // Refers to methods under mouse actions in bottum. 
    if (showSlider) {
      fill(150);
      ellipse(sliderX, scaleY, 30, 30);
    }
  }

        //Place the ellipse for marker. 
   public void mousePressed() {
    float d = dist(mouseX, mouseY, sliderX, height * 1 / 3);
    if (d < 15) {
      dragging = true;
    }
  }

        // Stops following when released. 
   public void mouseReleased() {
    dragging = false;
  }

        // If dragged than change ellipse position to mouseX
   public void mouseDragged() {
    if (dragging) {
      sliderX = constrain(mouseX, 300, width - 300);
    }
  }

        // Prints the value to the terminal to follow the state of the program.
   public void printSliderValue() {
    int sliderValue = PApplet.parseInt(map(sliderX, 300, width - 300, 0, 100)); 
    println("Slider Value: " + sliderValue);
    
    // Hide the slider whwn submitting.
    setShowSlider(false);
  }

   public void setShowSlider(boolean showSlider) {
    this.showSlider = showSlider;
  }

   public void setSliderPosition(float x) {
    sliderX = constrain(x, 100, width - 100);
  }
}
 public void randomize(){

    StringList knobInventory;
        knobInventory = new StringList();
        knobInventory.append("kA");
        knobInventory.append("kB");
        knobInventory.append("kC");
        knobInventory.append("kD");
        knobInventory.append("kE");
        knobInventory.append("kF");
        knobInventory.append("kG");
        //println("Normal button list:" + buttonInventory);
        knobInventory.shuffle();
        println("shuffled buttonlist:" + knobInventory);


    StringList scaleInventory;
        scaleInventory = new StringList();
        scaleInventory.append("Modstand ud af step");
        scaleInventory.append("Kraft ind i step");
        scaleInventory.append("Range");
        scaleInventory.append("StepstÃ¸rrelse");
        scaleInventory.append("Ustabil");
        //println("Normal scale list:" + scaleInventory);
        scaleInventory.shuffle();
        println("Shuffled scale list:" + scaleInventory);
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "scale_Project" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
